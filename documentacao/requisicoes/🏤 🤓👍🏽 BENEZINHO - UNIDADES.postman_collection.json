{
	"info": {
		"_postman_id": "329625a1-4d9f-41f8-b26c-bb7fe3e01867",
		"name": "üè§ ü§ìüëçüèΩ BENEZINHO - UNIDADES",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1524675"
	},
	"item": [
		{
			"name": "SUCESSO",
			"item": [
				{
					"name": "001 - USUARIO",
					"item": [
						{
							"name": "http://localhost/api/usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is a JSON object with id, username, and pessoa properties\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('id', 'username', 'pessoa');",
											"});",
											"",
											"pm.test(\"pessoa property has id, nome, sobrenome, email, nascimento, and tipo properties\", function () {",
											"    pm.expect(pm.response.json().pessoa).to.be.an('object').that.has.all.keys('id', 'nome', 'sobrenome', 'email', 'nascimento', 'tipo');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"bruninhosudre@gmail.com\",\r\n    \"password\": \"#Abc123*\",\r\n    \"pessoa\": {\r\n        \"nome\": \"Bruno Sudr√©\",\r\n        \"sobrenome\": \"Nascimento\",\r\n        \"nascimento\": \"2000-05-15\",\r\n        \"email\": \"bruninhosudre@gmail.com\",\r\n        \"tipo\": \"PF\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/usuario",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"usuario"
									]
								},
								"description": "This API endpoint allows you to create a new user by sending a POST request to the specified URL. The request should include a JSON payload in the raw request body, containing the user's username, password, and personal details such as name, surname, date of birth, email, and type.\n\n### Request Body\n\n- `username` (string): The username of the user.\n- `password` (string): The password for the user's account.\n- `pessoa` (object): An object containing the personal details of the user.\n    - `nome` (string): The first name of the user.\n    - `sobrenome` (string): The last name of the user.\n    - `nascimento` (string): The date of birth of the user.\n    - `email` (string): The email address of the user.\n    - `tipo` (string): The type of user.\n\n### Response\n\nUpon successful execution, the API returns a status code of 200 with a Content-Type of text/xml. The response body is not available (null)."
							},
							"response": []
						},
						{
							"name": "http://localhost/api/usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array of objects\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
											"    pm.response.json().forEach(function(user) {\r",
											"        pm.expect(user).to.be.an('object').that.has.property('id');\r",
											"        pm.expect(user.pessoa).to.be.an('object').that.has.property('id');\r",
											"        pm.expect(user.pessoa).to.be.an('object').that.has.property('email');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 990ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(990);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost/api/usuario",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"usuario"
									],
									"query": [
										{
											"key": "username",
											"value": "benefrancis@gmail.com",
											"disabled": true
										},
										{
											"key": "pessoa.nome",
											"value": "benefrancis",
											"disabled": true
										},
										{
											"key": "pessoa.sobrenome",
											"value": "nascimento",
											"disabled": true
										},
										{
											"key": "pessoa.nascimento",
											"value": "1977-03-08",
											"disabled": true
										},
										{
											"key": "pessoa.tipo",
											"value": "PF",
											"disabled": true
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve user information from the API. The response will be in JSON format and will include the user's ID, username, and details about the associated person such as their ID, name, surname, email, date of birth, and type.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "002 - UNIDADE",
					"item": [
						{
							"name": "HPRES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is an object with id, nome, sigla, descricao, and macro properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'nome', 'sigla', 'descricao', 'macro');",
											"});",
											"",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"Presid√™ncia\",\r\n    \"sigla\": \"HPRES\",\r\n    \"descricao\": \"Presid√™ncia da Holding das empresas Benezinho\",\r\n    \"macro\": {\r\n        \"id\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/unidade",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"unidade"
									]
								},
								"description": "\nThis endpoint allows you to create a new \"unidade\" via an HTTP POST request to the specified URL. The request should include a JSON payload in the raw request body, with parameters for \"nome\", \"sigla\", \"descricao\", and \"macro\". \n\n### Request Body\n- `nome` (string): The name of the \"unidade\".\n- `sigla` (string): The abbreviation of the \"unidade\".\n- `descricao` (string): A description of the \"unidade\".\n- `macro` (object): An object containing the details of the \"macro\" entity, including its \"id\", \"nome\", \"sigla\", \"descricao\", and \"macro\" properties.\n\n### Response\nUpon successful creation, the endpoint returns a status code of 201 and a JSON object containing the details of the newly created \"unidade\", including its \"id\", \"nome\", \"sigla\", \"descricao\", and \"macro\" properties.\n\nExample Response:\n```json\n{\n    \"id\": 0,\n    \"nome\": \"\",\n    \"sigla\": \"\",\n    \"descricao\": \"\",\n    \"macro\": {\n        \"id\": 0,\n        \"nome\": \"\",\n        \"sigla\": \"\",\n        \"descricao\": \"\",\n        \"macro\": null\n    }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "DTIC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with id, nome, sigla, descricao, and macro properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'nome', 'sigla', 'descricao', 'macro');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"DIRETORIA DE TECNOLOGIA DA INFORMA√á√ÉO E COMUNICAC√ÉO\",\r\n    \"sigla\": \"HDTIC\",\r\n    \"descricao\": \"Diretoria de Tecnologia de Informa√ß√£o e Comunica√ß√£o\",\r\n    \"macro\": {\r\n        \"id\": 2\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/unidade",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"unidade"
									]
								},
								"description": "\nThis HTTP POST request is used to create a new \"unidade\" (unit) via the API. The request should include the following parameters in the raw request body:\n\n- \"nome\": (string) The name of the unit.\n- \"sigla\": (string) The abbreviation of the unit.\n- \"descricao\": (string) A description of the unit.\n- \"macro\": (object) An object containing the details of the macro unit, including its \"id\", \"nome\", \"sigla\", \"descricao\", and \"macro\" properties.\n\nUpon successful execution, the API returns a status code of 201 and a JSON response containing the newly created unit's \"id\", \"nome\", \"sigla\", \"descricao\", and \"macro\" details, including the nested \"macro\" properties.\n\nExample Request:\n```json\n{\n  \"nome\": \"\",\n  \"sigla\": \"\",\n  \"descricao\": \"\",\n  \"macro\": {\n    \"id\": 0\n  }\n}\n```\n\nExample Response:\n```json\n{\n  \"id\": 0,\n  \"nome\": \"\",\n  \"sigla\": \"\",\n  \"descricao\": \"\",\n  \"macro\": {\n    \"id\": 0,\n    \"nome\": \"\",\n    \"sigla\": \"\",\n    \"descricao\": \"\",\n    \"macro\": {\n      \"id\": 0,\n      \"nome\": \"\",\n      \"sigla\": \"\",\n      \"descricao\": \"\",\n      \"macro\": null\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "GREDES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is a JSON object with id, nome, sigla, descricao, and macro properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'nome', 'sigla', 'descricao', 'macro');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"Gerencia de Redes e Telefonia\",\r\n    \"sigla\": \"GREDES\",\r\n    \"descricao\": \"Ger√™ncia de Redes e Telefonia\",\r\n    \"macro\": {\r\n        \"id\": 3\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/unidade",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"unidade"
									]
								},
								"description": "\nThis endpoint allows you to create a new \"unidade\" by making an HTTP POST request to the specified URL. The request should include a JSON payload in the raw request body, with parameters for \"nome\", \"sigla\", \"descricao\", and \"macro\". The \"macro\" parameter should have an \"id\" value.\n\n### Request Body\n- nome (string): The name of the \"unidade\".\n- sigla (string): The abbreviation of the \"unidade\".\n- descricao (string): A description of the \"unidade\".\n- macro (object): An object containing the \"id\" of the macro.\n\n### Response\nUpon successful creation, the endpoint returns a status code of 201 and a JSON object with the details of the newly created \"unidade\", including its \"id\", \"nome\", \"sigla\", \"descricao\", and \"macro\" details.\n\nExample:\n```json\n{\n    \"id\": 0,\n    \"nome\": \"\",\n    \"sigla\": \"\",\n    \"descricao\": \"\",\n    \"macro\": {\n        \"id\": 0,\n        \"nome\": \"\",\n        \"sigla\": \"\",\n        \"descricao\": \"\",\n        \"macro\": {\n            \"id\": 0,\n            \"nome\": \"\",\n            \"sigla\": \"\",\n            \"descricao\": \"\",\n            \"macro\": {\n                \"id\": 0,\n                \"nome\": \"\",\n                \"sigla\": \"\",\n                \"descricao\": \"\",\n                \"macro\": null\n            }\n        }\n    }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "http://localhost/api/unidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response is an array of objects with specific properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(item) {",
											"        pm.expect(item).to.have.property('id');",
											"        pm.expect(item).to.have.property('nome');",
											"        pm.expect(item).to.have.property('sigla');",
											"        pm.expect(item).to.have.property('descricao');",
											"        pm.expect(item).to.have.property('macro');",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost/api/unidade",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"unidade"
									],
									"query": [
										{
											"key": "nome",
											"value": "benezinho holding",
											"disabled": true
										},
										{
											"key": "sigla",
											"value": "BHLD",
											"disabled": true
										},
										{
											"key": "macro",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of units. The response will be in JSON format and will include an array of objects, each representing a unit with its id, name, acronym, description, and macro attribute.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "003 - CHEFE",
					"item": [
						{
							"name": "http://localhost/api/chefe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is a JSON object\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response contains id, substituto, usuario, and unidade properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('substituto');",
											"    pm.expect(jsonData).to.have.property('usuario');",
											"    pm.expect(jsonData).to.have.property('unidade');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "    {\r\n    \r\n        \"substituto\": true,\r\n        \"usuario\": {\r\n            \"id\": 2\r\n        },\r\n        \"unidade\": {\r\n            \"id\": 1\r\n        },\r\n        \"inicio\": \"2024-04-14T17:55:00.240799\",\r\n        \"fim\": null\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/chefe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"chefe"
									]
								},
								"description": "### Add Chef Endpoint\n\nThis API endpoint allows you to create a new chef by making an HTTP POST request to the specified URL.\n\n#### Request Body\n\n- `substituto` (boolean): Indicates if the chef is a substitute.\n- `usuario` (object): The user details including the `id`.\n- `unidade` (object): The unit details including the `id`.\n- `inicio` (string): The start date of the chef's assignment.\n- `fim` (null): The end date of the chef's assignment, if applicable.\n    \n\n#### Response\n\nUpon a successful creation, the server responds with a status code of 201 and a JSON object containing the following fields:\n\n- `id` (number): The unique identifier of the chef.\n- `substituto` (boolean): Indicates if the chef is a substitute.\n- `usuario` (object): The user details including the `id`, `username`, and `pessoa` details.\n- `unidade` (object): The unit details including the `id`, `nome`, `sigla`, and `descricao`.\n- `inicio` (string): The start date of the chef's assignment.\n- `fim` (null): The end date of the chef's assignment, if applicable.\n    \n\nThe `pessoa` object within the `usuario` object contains details such as `id`, `nome`, `sobrenome`, `email`, `nascimento`, and `tipo`."
							},
							"response": []
						},
						{
							"name": "http://localhost/api/chefe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has Content-Type header with value application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Each element in the response array has id, substituto, usuario, unidade, inicio, and fim properties\", function () {",
											"    pm.response.json().forEach(function(item) {",
											"        pm.expect(item).to.have.property('id');",
											"        pm.expect(item).to.have.property('substituto');",
											"        pm.expect(item).to.have.property('usuario');",
											"        pm.expect(item).to.have.property('unidade');",
											"        pm.expect(item).to.have.property('inicio');",
											"        pm.expect(item).to.have.property('fim');",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/chefe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"chefe"
									],
									"query": [
										{
											"key": "pessoa.tipo",
											"value": "PF",
											"disabled": true
										},
										{
											"key": "substituto",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve information about a \"chefe\" (boss). The response will be in JSON format and will include the ID of the boss, whether they have a substitute, details about the user (ID, username, and personal information), details about the unit (ID, name, abbreviation, description, and macro), start and end dates of the boss's term.\n\n"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ERROS",
			"item": [
				{
					"name": "001 - USUARIO",
					"item": [
						{
							"name": "http://localhost/api/usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response has status, message, and errors properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('status');",
											"    pm.expect(jsonData).to.have.property('message');",
											"    pm.expect(jsonData).to.have.property('errors');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"bruninhosudrehotmail.com\",\r\n    \"password\": \"#abc123*\",\r\n    \"pessoa\": {\r\n        \"nome\": \"Brow\",\r\n        \"sobrenome\": \"Nascimento\",\r\n        \"nascimento\": \"2040-05-15\",\r\n        \"email\": \"bruninhosudregmail.com\",\r\n        \"tipo\": \"PF\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/usuario",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"usuario"
									]
								},
								"description": "This API endpoint allows you to create a new user by sending a POST request to the specified URL. The request should include a JSON payload in the raw request body, containing the user's username, password, and personal details such as name, surname, date of birth, email, and type.\n\n### Request Body\n\n- `username` (string): The username of the user.\n- `password` (string): The password for the user's account.\n- `pessoa` (object): An object containing the personal details of the user.\n    - `nome` (string): The first name of the user.\n    - `sobrenome` (string): The last name of the user.\n    - `nascimento` (string): The date of birth of the user.\n    - `email` (string): The email address of the user.\n    - `tipo` (string): The type of user.\n\n### Response\n\nUpon successful execution, the API returns a status code of 200 with a Content-Type of text/xml. The response body is not available (null)."
							},
							"response": []
						}
					]
				},
				{
					"name": "002 - UNIDADE Copy",
					"item": [
						{
							"name": "POST COM VARIOS ERROS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body is a JSON object\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"pm.test(\"Response contains 'status' property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property(\"status\");",
											"});",
											"",
											"pm.test(\"Response contains 'message' property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property(\"message\");",
											"});",
											"",
											"pm.test(\"Response contains 'endpoint' property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property(\"endpoint\");",
											"});",
											"",
											"pm.test(\"Response contains 'errors' property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property(\"errors\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"Pr\",\r\n    \"sigla\": \"HPR\",\r\n    \"descricao\": \"\",\r\n    \"macro\": {\r\n        \"id\": 0\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/unidade",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"unidade"
									]
								},
								"description": "\nThis endpoint allows you to create a new \"unidade\" via an HTTP POST request to the specified URL. The request should include a JSON payload in the raw request body, with parameters for \"nome\", \"sigla\", \"descricao\", and \"macro\". \n\n### Request Body\n- `nome` (string): The name of the \"unidade\".\n- `sigla` (string): The abbreviation of the \"unidade\".\n- `descricao` (string): A description of the \"unidade\".\n- `macro` (object): An object containing the details of the \"macro\" entity, including its \"id\", \"nome\", \"sigla\", \"descricao\", and \"macro\" properties.\n\n### Response\nUpon successful creation, the endpoint returns a status code of 201 and a JSON object containing the details of the newly created \"unidade\", including its \"id\", \"nome\", \"sigla\", \"descricao\", and \"macro\" properties.\n\nExample Response:\n```json\n{\n    \"id\": 0,\n    \"nome\": \"\",\n    \"sigla\": \"\",\n    \"descricao\": \"\",\n    \"macro\": {\n        \"id\": 0,\n        \"nome\": \"\",\n        \"sigla\": \"\",\n        \"descricao\": \"\",\n        \"macro\": null\n    }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "TAMANHOS PEQUENOS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is a JSON object\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'status' property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'message' property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'endpoint' property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"endpoint\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'errors' property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"errors\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \r\n    \"sigla\": \"HD\",\r\n    \"descricao\": \"Di\",\r\n    \"macro\": {\r\n        \"id\": 0\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/unidade",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"unidade"
									]
								},
								"description": "\nThis HTTP POST request is used to create a new \"unidade\" (unit) via the API. The request should include the following parameters in the raw request body:\n\n- \"nome\": (string) The name of the unit.\n- \"sigla\": (string) The abbreviation of the unit.\n- \"descricao\": (string) A description of the unit.\n- \"macro\": (object) An object containing the details of the macro unit, including its \"id\", \"nome\", \"sigla\", \"descricao\", and \"macro\" properties.\n\nUpon successful execution, the API returns a status code of 201 and a JSON response containing the newly created unit's \"id\", \"nome\", \"sigla\", \"descricao\", and \"macro\" details, including the nested \"macro\" properties.\n\nExample Request:\n```json\n{\n  \"nome\": \"\",\n  \"sigla\": \"\",\n  \"descricao\": \"\",\n  \"macro\": {\n    \"id\": 0\n  }\n}\n```\n\nExample Response:\n```json\n{\n  \"id\": 0,\n  \"nome\": \"\",\n  \"sigla\": \"\",\n  \"descricao\": \"\",\n  \"macro\": {\n    \"id\": 0,\n    \"nome\": \"\",\n    \"sigla\": \"\",\n    \"descricao\": \"\",\n    \"macro\": {\n      \"id\": 0,\n      \"nome\": \"\",\n      \"sigla\": \"\",\n      \"descricao\": \"\",\n      \"macro\": null\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "TAMANHOS GRANDES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response object has status, message, endpoint, and errors properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('status', 'message', 'endpoint', 'errors');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"Gerencia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e Telefonia\",\r\n    \"sigla\": \"GREDESksjaflk√ßajds√ßlfkja√ßsjdlkfjaslkd√ßjf√ßlkasjdflkjasl√ßkdjf√ßlkasjdlk√ßj\",\r\n    \"descricao\": \"Ger√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e TelefoniaGer√™ncia de Redes e Telefonia\",\r\n    \"macro\": {\r\n        \"id\": 0\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/unidade",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"unidade"
									]
								},
								"description": "\nThis endpoint allows you to create a new \"unidade\" by making an HTTP POST request to the specified URL. The request should include a JSON payload in the raw request body, with parameters for \"nome\", \"sigla\", \"descricao\", and \"macro\". The \"macro\" parameter should have an \"id\" value.\n\n### Request Body\n- nome (string): The name of the \"unidade\".\n- sigla (string): The abbreviation of the \"unidade\".\n- descricao (string): A description of the \"unidade\".\n- macro (object): An object containing the \"id\" of the macro.\n\n### Response\nUpon successful creation, the endpoint returns a status code of 201 and a JSON object with the details of the newly created \"unidade\", including its \"id\", \"nome\", \"sigla\", \"descricao\", and \"macro\" details.\n\nExample:\n```json\n{\n    \"id\": 0,\n    \"nome\": \"\",\n    \"sigla\": \"\",\n    \"descricao\": \"\",\n    \"macro\": {\n        \"id\": 0,\n        \"nome\": \"\",\n        \"sigla\": \"\",\n        \"descricao\": \"\",\n        \"macro\": {\n            \"id\": 0,\n            \"nome\": \"\",\n            \"sigla\": \"\",\n            \"descricao\": \"\",\n            \"macro\": {\n                \"id\": 0,\n                \"nome\": \"\",\n                \"sigla\": \"\",\n                \"descricao\": \"\",\n                \"macro\": null\n            }\n        }\n    }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "http://localhost/api/unidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response is an array of objects with specific properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(item) {",
											"        pm.expect(item).to.have.property('id');",
											"        pm.expect(item).to.have.property('nome');",
											"        pm.expect(item).to.have.property('sigla');",
											"        pm.expect(item).to.have.property('descricao');",
											"        pm.expect(item).to.have.property('macro');",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost/api/unidade",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"unidade"
									],
									"query": [
										{
											"key": "nome",
											"value": "benezinho holding",
											"disabled": true
										},
										{
											"key": "sigla",
											"value": "BHLD",
											"disabled": true
										},
										{
											"key": "macro",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of units. The response will be in JSON format and will include an array of objects, each representing a unit with its id, name, acronym, description, and macro attribute.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "003 - CHEFE Copy",
					"item": [
						{
							"name": "http://localhost/api/chefe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is a JSON object\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response contains id, substituto, usuario, and unidade properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('substituto');",
											"    pm.expect(jsonData).to.have.property('usuario');",
											"    pm.expect(jsonData).to.have.property('unidade');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "    {\r\n    \r\n        \"substituto\": true,\r\n        \"usuario\": {\r\n            \"id\": 2\r\n        },\r\n        \"unidade\": {\r\n            \"id\": 1\r\n        },\r\n        \"inicio\": \"2024-04-14T17:55:00.240799\",\r\n        \"fim\": null\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/chefe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"chefe"
									]
								},
								"description": "### Add Chef Endpoint\n\nThis API endpoint allows you to create a new chef by making an HTTP POST request to the specified URL.\n\n#### Request Body\n\n- `substituto` (boolean): Indicates if the chef is a substitute.\n- `usuario` (object): The user details including the `id`.\n- `unidade` (object): The unit details including the `id`.\n- `inicio` (string): The start date of the chef's assignment.\n- `fim` (null): The end date of the chef's assignment, if applicable.\n    \n\n#### Response\n\nUpon a successful creation, the server responds with a status code of 201 and a JSON object containing the following fields:\n\n- `id` (number): The unique identifier of the chef.\n- `substituto` (boolean): Indicates if the chef is a substitute.\n- `usuario` (object): The user details including the `id`, `username`, and `pessoa` details.\n- `unidade` (object): The unit details including the `id`, `nome`, `sigla`, and `descricao`.\n- `inicio` (string): The start date of the chef's assignment.\n- `fim` (null): The end date of the chef's assignment, if applicable.\n    \n\nThe `pessoa` object within the `usuario` object contains details such as `id`, `nome`, `sobrenome`, `email`, `nascimento`, and `tipo`."
							},
							"response": []
						},
						{
							"name": "http://localhost/api/chefe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has Content-Type header with value application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Each element in the response array has id, substituto, usuario, unidade, inicio, and fim properties\", function () {",
											"    pm.response.json().forEach(function(item) {",
											"        pm.expect(item).to.have.property('id');",
											"        pm.expect(item).to.have.property('substituto');",
											"        pm.expect(item).to.have.property('usuario');",
											"        pm.expect(item).to.have.property('unidade');",
											"        pm.expect(item).to.have.property('inicio');",
											"        pm.expect(item).to.have.property('fim');",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/chefe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"chefe"
									],
									"query": [
										{
											"key": "pessoa.tipo",
											"value": "PF",
											"disabled": true
										},
										{
											"key": "substituto",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve information about a \"chefe\" (boss). The response will be in JSON format and will include the ID of the boss, whether they have a substitute, details about the user (ID, username, and personal information), details about the unit (ID, name, abbreviation, description, and macro), start and end dates of the boss's term.\n\n"
							},
							"response": []
						}
					]
				}
			]
		}
	]
}